// Code generated by mockery v2.25.1. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "microservice/shared/domain"
	dto "microservice/shared/dto"

	mock "github.com/stretchr/testify/mock"
)

// RoleMysqlRepository is an autogenerated mock type for the RoleMysqlRepository type
type RoleMysqlRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: c, id
func (_m *RoleMysqlRepository) Delete(c context.Context, id string) error {
	ret := _m.Called(c, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(c, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fetch provides a mock function with given fields: c, pagination
func (_m *RoleMysqlRepository) Fetch(c context.Context, pagination *dto.Pagination) ([]*domain.Role, error) {
	ret := _m.Called(c, pagination)

	var r0 []*domain.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.Pagination) ([]*domain.Role, error)); ok {
		return rf(c, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.Pagination) []*domain.Role); ok {
		r0 = rf(c, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.Pagination) error); ok {
		r1 = rf(c, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: c, id
func (_m *RoleMysqlRepository) GetByID(c context.Context, id string) (domain.Role, error) {
	ret := _m.Called(c, id)

	var r0 domain.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.Role, error)); ok {
		return rf(c, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Role); ok {
		r0 = rf(c, id)
	} else {
		r0 = ret.Get(0).(domain.Role)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: c, r
func (_m *RoleMysqlRepository) Store(c context.Context, r domain.Role) (domain.Role, error) {
	ret := _m.Called(c, r)

	var r0 domain.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Role) (domain.Role, error)); ok {
		return rf(c, r)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Role) domain.Role); ok {
		r0 = rf(c, r)
	} else {
		r0 = ret.Get(0).(domain.Role)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Role) error); ok {
		r1 = rf(c, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: c, r
func (_m *RoleMysqlRepository) Update(c context.Context, r domain.Role) (domain.Role, error) {
	ret := _m.Called(c, r)

	var r0 domain.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Role) (domain.Role, error)); ok {
		return rf(c, r)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Role) domain.Role); ok {
		r0 = rf(c, r)
	} else {
		r0 = ret.Get(0).(domain.Role)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Role) error); ok {
		r1 = rf(c, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRoleMysqlRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRoleMysqlRepository creates a new instance of RoleMysqlRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRoleMysqlRepository(t mockConstructorTestingTNewRoleMysqlRepository) *RoleMysqlRepository {
	mock := &RoleMysqlRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
