// Code generated by mockery v2.25.1. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "microservice/shared/dto"

	mock "github.com/stretchr/testify/mock"
)

// RoleUsecase is an autogenerated mock type for the RoleUsecase type
type RoleUsecase struct {
	mock.Mock
}

// Delete provides a mock function with given fields: c, id
func (_m *RoleUsecase) Delete(c context.Context, id string) error {
	ret := _m.Called(c, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(c, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fetch provides a mock function with given fields: c, pagination
func (_m *RoleUsecase) Fetch(c context.Context, pagination dto.Pagination) (dto.Pagination, error) {
	ret := _m.Called(c, pagination)

	var r0 dto.Pagination
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.Pagination) (dto.Pagination, error)); ok {
		return rf(c, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.Pagination) dto.Pagination); ok {
		r0 = rf(c, pagination)
	} else {
		r0 = ret.Get(0).(dto.Pagination)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.Pagination) error); ok {
		r1 = rf(c, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: c, id
func (_m *RoleUsecase) GetByID(c context.Context, id string) (dto.RoleResponse, error) {
	ret := _m.Called(c, id)

	var r0 dto.RoleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (dto.RoleResponse, error)); ok {
		return rf(c, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) dto.RoleResponse); ok {
		r0 = rf(c, id)
	} else {
		r0 = ret.Get(0).(dto.RoleResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: c, rreq
func (_m *RoleUsecase) Store(c context.Context, rreq dto.RoleRequestCreate) (dto.RoleResponse, error) {
	ret := _m.Called(c, rreq)

	var r0 dto.RoleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.RoleRequestCreate) (dto.RoleResponse, error)); ok {
		return rf(c, rreq)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.RoleRequestCreate) dto.RoleResponse); ok {
		r0 = rf(c, rreq)
	} else {
		r0 = ret.Get(0).(dto.RoleResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.RoleRequestCreate) error); ok {
		r1 = rf(c, rreq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: c, rreq
func (_m *RoleUsecase) Update(c context.Context, rreq dto.RoleRequestUpdate) (dto.RoleResponse, error) {
	ret := _m.Called(c, rreq)

	var r0 dto.RoleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.RoleRequestUpdate) (dto.RoleResponse, error)); ok {
		return rf(c, rreq)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.RoleRequestUpdate) dto.RoleResponse); ok {
		r0 = rf(c, rreq)
	} else {
		r0 = ret.Get(0).(dto.RoleResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.RoleRequestUpdate) error); ok {
		r1 = rf(c, rreq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRoleUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewRoleUsecase creates a new instance of RoleUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRoleUsecase(t mockConstructorTestingTNewRoleUsecase) *RoleUsecase {
	mock := &RoleUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
